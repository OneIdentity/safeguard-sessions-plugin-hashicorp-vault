[hashicorp]
# The address or hostname of the Hashicorp Vault. Separate more than one
# addresses with a comma (,).
; address=<address>

# The port number of the Hashicorp Vault. Default is 8200.
; port=8200

# The authentication method to use to connect to the Hashicorp Vault. The value
# can be one of the following: ldap or userpass.
; authentication_method=<authentication_method>

# The credential type to use. The value can be one of the following: explicit or
# gateway. If you use credential type, you must also configure the username and
# password parameters. Default is gateway.
; use_credential=gateway

# The username used to authenticate to the Hashicorp Vault in case you have configured
# the use_credential parameter as explicit
; username=<username>

# The password used to authenticate to the Hashicorp Vault if you have configured
# the use_credential parameter as explicit. To use a local Credential Store to
# host this data, set the parameter to $ and read the "Store sensitive plugin data
# securely" section in the documentation.
; password=<$-or-password>

[engine-kv-v1]
# The path of the endpoint under which the user names and passwords are stored as secrets.
# For example, secrets/users. The server username is then appended to the path on-the-fly.
# This compound path points to an object that has the password or key as one of its fields.
; secrets_path=<path>

# The value field to retrieve the password secret from, unless user-defined.
# This parameter is not related to the password parameter.
# Default is password
; password_field=password

# The value field to retrieve the SSH private key secret from, unless user-defined.
# Default is key
; key_field=key

# The character to use as delimiter so that SPS can parse the secret field from
# the user-defined compound path. For example, if the value of the delimiter parameter
# is :, then you can enter the value of the compound path as kv/secret:mypassword.
# The path will then be parsed as kv/secret and the value of password_field name will
# be parsed as mypassword.
; delimiter=<delimiter>

[tls]
# To disable TLS completely, enter no as the value of this parameter.
# Default is yes
; enabled = yes

# Configure this parameter to enable client-side verification. The certificate shown
# by the server will be checked with this CA.
# If the value of this parameter is $[<trusted-ca-list-name>], the certificates are
# retrieved from the trusted CA list configured on SPS, identified by the name.
# When the certificate is inserted into the configuration file, it must be in PEM
# format and all the new lines must be indented with one whitespace. If it is a chain,
# insert the certificates right after each other.
; ca_cert = <ca-certificate-chain>
; ca_cert = $[<trusted-ca-list-name>]

# Configure this parameter to enable server-side verification. If the value of this
# parameter is $, the certificate identified by the section and option pair is retrieved
# from the configured Credential Store. When the certificate is inserted into the
# configuration file, it must be in PEM format and all the new lines must be indented
# with one whitespace. Note that encrypted keys are not supported.
; client_cert = <client-certificate-and-key>

###### Common plugin options ######
# To enable or change a parameter, uncomment its line by removing the ';'
# character and replacing the right side of '=' with the desired value.
# If the parameter has the following structure
# ; name=<value>
# then the related option is turned off until you replace '<value>'.
#
# If the parameter has the following structure
# ; name=value
# then the related option is is automatically turned on with the default value
# of 'value'.
#
# To handle sensitive data, you can use a local Credential Store to retrieve
# parameters from.
# Enter the name of the local Credential Store (Policies > Credential Store) as
# the value of the 'name' parameter in section [credential_store]. To retrieve a
# parameter from this Credential Store, type the $ character as the value of
# a parameter in this configuration file. To use the $ character as value,
# type $$ instead. For more information, read the "Store sensitive plugin data
# securely" section in the Tutorial document.

[credential_store]
# Name of the local credential store configured in SPS for hosting sensitive
# configuration data. For more information, read the "Store sensitive
# plugin data securely" section in the Tutorial document.
; name=<name-of-credential-store-policy-that-hosts-sensitive-data>

[logging]
# To configure the log level, enter one of the following values:
# 'debug', 'info', 'warning', 'error', 'critical'
; log_level=info

[https_proxy]
# To set the HTTPS proxy environment for the plugin, configure the following.
; server=<proxy-server-name-or-ip>
; port=3128
